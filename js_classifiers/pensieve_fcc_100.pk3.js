var DecisionTreeClassifier = function() {

    this.lChilds = [1, 3, 5, 7, 9, 11, 39, 19, 45, 13, 15, 29, 25, 51, 57, 17, 61, 27, 65, 23, 21, 31, 43, -1, 41, 37, 49, 33, 59, 55, 69, -1, -1, 67, 35, 107, 105, 91, 47, 87, 71, 123, 63, 139, 75, 53, 153, -1, 131, 79, 85, 155, 81, 119, -1, 161, -1, -1, 77, 129, 143, 97, 95, 103, -1, 99, 135, 73, 111, 151, 147, -1, -1, 191, 179, 117, 137, 83, 157, -1, -1, -1, 189, -1, -1, 101, 167, -1, 89, -1, 127, 93, 171, 145, -1, 121, -1, -1, -1, -1, -1, 173, -1, 133, 109, 181, 187, -1, 115, -1, -1, 183, 113, -1, -1, -1, -1, -1, -1, 149, -1, -1, -1, -1, 125, -1, -1, -1, -1, -1, -1, -1, -1, 159, -1, -1, -1, 195, 177, 141, -1, -1, -1, 193, -1, -1, -1, 197, -1, -1, 175, -1, -1, 169, -1, -1, -1, -1, -1, -1, -1, 165, 163, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 185, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1];
    this.rChilds = [2, 4, 6, 8, 10, 12, 40, 20, 46, 14, 16, 30, 26, 52, 58, 18, 62, 28, 66, 24, 22, 32, 44, -1, 42, 38, 50, 34, 60, 56, 70, -1, -1, 68, 36, 108, 106, 92, 48, 88, 72, 124, 64, 140, 76, 54, 154, -1, 132, 80, 86, 156, 82, 120, -1, 162, -1, -1, 78, 130, 144, 98, 96, 104, -1, 100, 136, 74, 112, 152, 148, -1, -1, 192, 180, 118, 138, 84, 158, -1, -1, -1, 190, -1, -1, 102, 168, -1, 90, -1, 128, 94, 172, 146, -1, 122, -1, -1, -1, -1, -1, 174, -1, 134, 110, 182, 188, -1, 116, -1, -1, 184, 114, -1, -1, -1, -1, -1, -1, 150, -1, -1, -1, -1, 126, -1, -1, -1, -1, -1, -1, -1, -1, 160, -1, -1, -1, 196, 178, 142, -1, -1, -1, 194, -1, -1, -1, 198, -1, -1, 176, -1, -1, 170, -1, -1, -1, -1, -1, -1, -1, 166, 164, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 186, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1];
    this.thresholds = [0.22674418985843658, 0.12209302186965942, 0.7151162773370743, 1.4799468517303467, 1.072641670703888, 1.1025700569152832, 1.1600492596626282, 0.08890844509005547, 1.563593566417694, 0.08406776562333107, 2.431098461151123, 0.16577061265707016, 2.9574928283691406, 1.010873019695282, 0.09398042038083076, 0.22069548815488815, 0.12195418402552605, 0.6896223425865173, 1.4721825122833252, 0.0600627064704895, 0.9840947389602661, 0.18816407769918442, 0.15545419603586197, -2.0, 1.3414561748504639, 0.8412332534790039, 0.3351713865995407, 2.0373568534851074, 1.2243470549583435, 1.2136270999908447, 0.8947183787822723, -2.0, -2.0, 1.137831687927246, 0.15310313552618027, 2.26803982257843, 0.17963270097970963, 1.3046056032180786, 1.510608732700348, 0.1138061173260212, 0.9451779723167419, 0.08374221622943878, 0.08205318078398705, 1.2097835540771484, 1.1732794642448425, 0.06486910954117775, 0.060785917565226555, -2.0, 0.08803714066743851, 3.756186008453369, 3.3620212078094482, 0.9664123058319092, 0.06364930793642998, 0.610771656036377, -2.0, 0.9843320548534393, -2.0, -2.0, 0.10770735517144203, 0.42898572981357574, 0.6712192296981812, 2.6194097995758057, 2.572288155555725, 0.6979166567325592, -2.0, 0.31174197793006897, 0.27900688350200653, 0.06456274911761284, 0.1763984113931656, 0.18922318518161774, 0.19504516571760178, -2.0, -2.0, 0.5520833432674408, 0.09133505821228027, 0.1361692175269127, 0.09441478922963142, 0.9480193853378296, 0.6684902012348175, -2.0, -2.0, -2.0, 0.0576884001493454, -2.0, -2.0, 0.4191410392522812, 0.40899044275283813, -2.0, 0.3147466629743576, -2.0, 0.8292839229106903, 0.14589469879865646, 0.4773832857608795, 1.1932618618011475, -2.0, 0.1425931304693222, -2.0, -2.0, -2.0, -2.0, -2.0, 0.89478999376297, -2.0, 0.07237696647644043, 1.4245578050613403, 2.1502106189727783, 2.1675820350646973, -2.0, 0.11939754709601402, -2.0, -2.0, 0.07003651186823845, 1.8111160397529602, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, 1.3584409952163696, -2.0, -2.0, -2.0, -2.0, 1.2543294429779053, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, 1.4645555019378662, -2.0, -2.0, -2.0, 1.2879983186721802, 0.7018339335918427, 0.14651237428188324, -2.0, -2.0, -2.0, 0.051870329305529594, -2.0, -2.0, -2.0, 0.9860275983810425, -2.0, -2.0, 1.5377095937728882, -2.0, -2.0, 1.6176941990852356, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, 0.0830719843506813, 0.6501495242118835, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, 1.1935124397277832, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0];
    this.indices = [0, 0, 0, 1, 1, 1, 1, 8, 1, 9, 1, 9, 1, 1, 17, 9, 9, 17, 1, 17, 1, 9, 15, -2, 1, 17, 9, 1, 1, 17, 1, -2, -2, 1, 9, 1, 9, 1, 1, 9, 17, 6, 9, 1, 1, 9, 2, -2, 9, 1, 1, 1, 9, 13, -2, 1, -2, -2, 9, 10, 12, 1, 1, 24, -2, 9, 9, 9, 8, 9, 6, -2, -2, 24, 9, 9, 9, 1, 1, -2, -2, -2, 4, -2, -2, 8, 9, -2, 9, -2, 1, 9, 9, 1, -2, 9, -2, -2, -2, -2, -2, 21, -2, 2, 1, 1, 1, -2, 9, -2, -2, 9, 1, -2, -2, -2, -2, -2, -2, 22, -2, -2, -2, -2, 1, -2, -2, -2, -2, -2, -2, -2, -2, 1, -2, -2, -2, 1, 13, 7, -2, -2, -2, 2, -2, -2, -2, 1, -2, -2, 1, -2, -2, 1, -2, -2, -2, -2, -2, -2, -2, 9, 17, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, 1, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2];
    this.classes = [[36032, 72549, 328, 42156, 52, 8883], [35793, 69837, 80, 5553, 0, 0], [239, 2712, 248, 36603, 52, 8883], [30252, 8102, 0, 9, 0, 0], [5541, 61735, 80, 5544, 0, 0], [181, 2712, 241, 36077, 35, 1323], [58, 0, 7, 526, 17, 7560], [28510, 3892, 0, 6, 0, 0], [1742, 4210, 0, 3, 0, 0], [4119, 3109, 1, 220, 0, 0], [1422, 58626, 79, 5324, 0, 0], [163, 1839, 51, 1374, 0, 0], [18, 873, 190, 34703, 35, 1323], [3664, 796, 0, 0, 0, 0], [455, 2313, 1, 220, 0, 0], [1422, 56457, 64, 3346, 0, 0], [0, 2169, 15, 1978, 0, 0], [1422, 55954, 57, 2202, 0, 0], [0, 503, 7, 1144, 0, 0], [25028, 1582, 0, 3, 0, 0], [3482, 2310, 0, 3, 0, 0], [2637, 357, 0, 2, 0, 0], [845, 1953, 0, 1, 0, 0], [22, 335, 0, 2, 0, 0], [25006, 1247, 0, 1, 0, 0], [18, 873, 190, 31627, 19, 151], [0, 0, 0, 3076, 16, 1172], [859, 55355, 57, 2202, 0, 0], [563, 599, 0, 0, 0, 0], [163, 1271, 17, 242, 0, 0], [0, 568, 34, 1132, 0, 0], [2611, 114, 0, 0, 0, 0], [26, 243, 0, 2, 0, 0], [859, 45933, 19, 490, 0, 0], [0, 9422, 38, 1712, 0, 0], [0, 8517, 20, 862, 0, 0], [0, 905, 18, 850, 0, 0], [0, 429, 171, 30969, 19, 151], [18, 444, 19, 658, 0, 0], [54, 0, 5, 302, 11, 257], [4, 0, 2, 224, 6, 7303], [21153, 314, 0, 1, 0, 0], [3853, 933, 0, 0, 0, 0], [223, 1429, 0, 0, 0, 0], [622, 524, 0, 1, 0, 0], [1294, 1770, 0, 0, 0, 0], [448, 2440, 0, 3, 0, 0], [18, 341, 7, 97, 0, 0], [0, 103, 12, 561, 0, 0], [0, 0, 0, 1687, 7, 209], [0, 0, 0, 1389, 9, 963], [2794, 247, 0, 0, 0, 0], [870, 549, 0, 0, 0, 0], [1096, 938, 0, 0, 0, 0], [198, 832, 0, 0, 0, 0], [52, 1267, 17, 241, 0, 0], [111, 4, 0, 1, 0, 0], [0, 63, 0, 153, 0, 0], [455, 2250, 1, 67, 0, 0], [424, 148, 0, 0, 0, 0], [139, 451, 0, 0, 0, 0], [0, 1096, 4, 501, 0, 0], [0, 1073, 11, 1477, 0, 0], [3760, 746, 0, 0, 0, 0], [93, 187, 0, 0, 0, 0], [0, 321, 2, 228, 0, 0], [0, 182, 5, 916, 0, 0], [471, 2330, 0, 0, 0, 0], [388, 43603, 19, 490, 0, 0], [0, 307, 6, 170, 0, 0], [0, 261, 28, 962, 0, 0], [0, 0, 0, 116, 6, 7231], [4, 0, 2, 108, 0, 72], [258, 315, 0, 0, 0, 0], [213, 2015, 0, 0, 0, 0], [430, 131, 0, 1, 0, 0], [192, 393, 0, 0, 0, 0], [352, 621, 0, 0, 0, 0], [103, 1629, 1, 67, 0, 0], [0, 0, 0, 1649, 7, 126], [0, 0, 0, 38, 0, 83], [532, 145, 0, 0, 0, 0], [338, 404, 0, 0, 0, 0], [148, 47, 0, 0, 0, 0], [204, 574, 0, 0, 0, 0], [0, 0, 0, 1090, 9, 525], [0, 0, 0, 299, 0, 438], [54, 0, 0, 4, 0, 0], [0, 0, 5, 298, 11, 257], [0, 0, 5, 146, 3, 11], [0, 0, 0, 152, 8, 246], [0, 317, 48, 2505, 0, 0], [0, 112, 123, 28464, 19, 151], [0, 235, 19, 458, 0, 0], [0, 82, 29, 2047, 0, 0], [0, 859, 9, 875, 0, 0], [0, 214, 2, 602, 0, 0], [0, 904, 3, 275, 0, 0], [0, 192, 1, 226, 0, 0], [0, 280, 0, 100, 0, 0], [0, 41, 2, 128, 0, 0], [0, 0, 0, 802, 6, 238], [0, 0, 0, 288, 3, 287], [3130, 462, 0, 0, 0, 0], [630, 284, 0, 0, 0, 0], [0, 715, 8, 488, 0, 0], [0, 190, 10, 362, 0, 0], [0, 5529, 11, 327, 0, 0], [0, 2988, 9, 535, 0, 0], [472, 122, 0, 0, 0, 0], [158, 162, 0, 0, 0, 0], [388, 41454, 14, 254, 0, 0], [0, 2149, 5, 236, 0, 0], [0, 1628, 4, 53, 0, 0], [0, 521, 1, 183, 0, 0], [0, 1442, 3, 111, 0, 0], [0, 1546, 6, 424, 0, 0], [407, 80, 0, 0, 0, 0], [23, 51, 0, 1, 0, 0], [638, 711, 0, 0, 0, 0], [458, 227, 0, 0, 0, 0], [0, 687, 8, 541, 0, 0], [0, 172, 1, 334, 0, 0], [19812, 138, 0, 1, 0, 0], [1341, 176, 0, 0, 0, 0], [1155, 68, 0, 0, 0, 0], [186, 108, 0, 0, 0, 0], [0, 0, 0, 57, 3, 12], [0, 0, 0, 95, 5, 234], [342, 61, 0, 0, 0, 0], [82, 87, 0, 0, 0, 0], [0, 50, 1, 43, 0, 0], [0, 53, 11, 518, 0, 0], [2870, 342, 0, 0, 0, 0], [260, 120, 0, 0, 0, 0], [0, 117, 0, 228, 0, 0], [0, 65, 5, 688, 0, 0], [126, 118, 0, 0, 0, 0], [66, 275, 0, 0, 0, 0], [181, 583, 0, 0, 0, 0], [42, 846, 0, 0, 0, 0], [166, 254, 0, 0, 0, 0], [15, 329, 0, 0, 0, 0], [96, 432, 0, 0, 0, 0], [43, 19, 0, 0, 0, 0], [0, 131, 9, 116, 0, 0], [0, 104, 10, 342, 0, 0], [0, 235, 21, 583, 0, 0], [0, 26, 7, 379, 0, 0], [101, 235, 0, 0, 0, 0], [537, 476, 0, 0, 0, 0], [0, 220, 2, 61, 0, 0], [0, 87, 4, 109, 0, 0], [352, 1293, 0, 1, 0, 0], [96, 1147, 0, 2, 0, 0], [2150, 95, 0, 0, 0, 0], [644, 152, 0, 0, 0, 0], [21, 7, 0, 0, 0, 0], [82, 1622, 1, 67, 0, 0], [2630, 244, 0, 0, 0, 0], [240, 98, 0, 0, 0, 0], [52, 824, 5, 72, 0, 0], [0, 443, 12, 169, 0, 0], [0, 113, 3, 104, 0, 0], [0, 330, 9, 65, 0, 0], [33, 32, 0, 0, 0, 0], [19, 792, 5, 72, 0, 0], [0, 0, 0, 240, 0, 241], [0, 0, 0, 59, 0, 197], [277, 706, 0, 0, 0, 0], [75, 587, 0, 1, 0, 0], [0, 112, 123, 28293, 19, 100], [0, 0, 0, 171, 0, 51], [0, 0, 0, 176, 2, 113], [0, 0, 0, 626, 4, 125], [413, 276, 0, 0, 0, 0], [124, 200, 0, 0, 0, 0], [21, 225, 0, 0, 0, 0], [45, 50, 0, 0, 0, 0], [184, 953, 0, 0, 0, 0], [29, 1062, 0, 0, 0, 0], [0, 259, 5, 92, 0, 0], [0, 456, 3, 396, 0, 0], [249, 4091, 0, 1, 0, 0], [139, 37363, 14, 253, 0, 0], [114, 455, 0, 0, 0, 0], [135, 3636, 0, 1, 0, 0], [0, 117, 6, 117, 0, 0], [0, 73, 4, 245, 0, 0], [51, 10, 0, 0, 0, 0], [287, 394, 0, 0, 0, 0], [143, 251, 0, 0, 0, 0], [115, 64, 0, 0, 0, 0], [52, 73, 0, 0, 0, 0], [44, 359, 0, 0, 0, 0], [53, 10, 0, 0, 0, 0], [73, 108, 0, 0, 0, 0], [0, 142, 10, 204, 0, 0], [0, 93, 11, 379, 0, 0]];


    var findMax = function(nums) {
        var index = 0;
        for (var i = 0; i < nums.length; i++) {
            index = nums[i] > nums[index] ? i : index;
        }
        return index;
    };

    this.predict = function(features, node) {
        node = (typeof node !== 'undefined') ? node : 0;
        if (this.thresholds[node] != -2) {
            if (features[this.indices[node]] <= this.thresholds[node]) {
                return this.predict(features, this.lChilds[node]);
            } else {
                return this.predict(features, this.rChilds[node]);
            }
        }
        return findMax(this.classes[node]);
    };

};

export default DecisionTreeClassifier;
